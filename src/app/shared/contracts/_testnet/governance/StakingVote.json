{
  "address": "0x571d90095ebAC3650E61B6f85a955Be17166eF60",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IORVote",
          "name": "_voteToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_stakeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_voteTokenPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timeLock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolMultiplier",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "pendingVoteToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accVoteTokenPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeLock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVoteTokenPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateVoteTokenPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteToken",
      "outputs": [
        {
          "internalType": "contract IORVote",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteTokenPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x29a3610a1e93ecfbb29b2ffde7b5e4dce6e623aeef22cd44bc9b54a85b3cfa2f",
  "receipt": {
    "to": null,
    "from": "0x2aBcbdF5a10082F311D666EC58aD1C90948a2F4a",
    "contractAddress": "0x571d90095ebAC3650E61B6f85a955Be17166eF60",
    "transactionIndex": 14,
    "gasUsed": "1445203",
    "logsBloom": "0x
    "blockHash": "0xea559b30e6d8bc4ecadc11caf06455c7584d9a5205e922d7df9f9e5634fb7c5c",
    "transactionHash": "0x29a3610a1e93ecfbb29b2ffde7b5e4dce6e623aeef22cd44bc9b54a85b3cfa2f",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 22635535,
        "transactionHash": "0x29a3610a1e93ecfbb29b2ffde7b5e4dce6e623aeef22cd44bc9b54a85b3cfa2f",
        "address": "0x571d90095ebAC3650E61B6f85a955Be17166eF60",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002abcbdf5a10082f311d666ec58ad1c90948a2f4a"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0xea559b30e6d8bc4ecadc11caf06455c7584d9a5205e922d7df9f9e5634fb7c5c"
      }
    ],
    "blockNumber": 22635535,
    "cumulativeGasUsed": "3427324",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3D3f1b16aE9e681191798527265CcEf79c2e10CE",
    "0x1b71dC069b6531B5C443f75E8924299Da57C7dE9",
    "2880000000000000000",
    "0"
  ],
  "numDeployments": 1,
  "solcInputHash": "7fe6b499d6a59a182d175109373bddc9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IORVote\",\"name\":\"_voteToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_voteTokenPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolMultiplier\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingVoteToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accVoteTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVoteTokenPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateVoteTokenPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteToken\",\"outputs\":[{\"internalType\":\"contract IORVote\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteTokenPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ibai -Nexxyo Labs\",\"kind\":\"dev\",\"methods\":{\"add(uint256,address,uint256,uint256)\":{\"params\":{\"allocPoint\":\"allocation points assigned to this new pool\",\"timeLock\":\"the time for locking tokens\",\"token\":\"the stake token added to the pool\"}},\"claim(uint256)\":{\"params\":{\"pid\":\"The pool identifier where user deposit tokens\"}},\"deposit(uint256,uint256)\":{\"params\":{\"amount\":\"The amount to deposit\",\"pid\":\"The pool identifier where user deposit tokens\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"pid\":\"The pool identifier where user withdraws\"}},\"getMultiplier(uint256,uint256,uint256)\":{\"params\":{\"from\":\"From block\",\"poolMultiplier\":\"The pool multiplier parameter\",\"to\":\"To block\"},\"returns\":{\"_0\":\"Multiplier value\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingVoteToken(uint256,address)\":{\"params\":{\"pid\":\"Identifier of the pool in which we consult the pending rewards\",\"user\":\"User that consult the rewards\"}},\"poolLength()\":{\"returns\":{\"_0\":\"poolInfo length\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"set(uint256,uint256)\":{\"params\":{\"allocPoint\":\"The new alloc point quantity\",\"pid\":\"The pool identifier\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool(uint256)\":{\"params\":{\"pid\":\"The pool identifier to update\"}},\"updateVoteTokenPerBlock(uint256)\":{\"params\":{\"_newVoteTokenPerBlock\":\"The new token per block amount\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\",\"pid\":\"The pool identifier where user withdraw tokens\"}}},\"title\":\"Staking contract to earn Voting Power\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(uint256,address,uint256,uint256)\":{\"notice\":\"Add a new pool with different configuration\"},\"claim(uint256)\":{\"notice\":\"Deposit tokens to the contract to receive rewards\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit tokens to the contract to receive rewards\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY.\"},\"getMultiplier(uint256,uint256,uint256)\":{\"notice\":\"Return reward multiplier over the given _from to _to block\"},\"massUpdatePools()\":{\"notice\":\"Update reward variables for all pools\"},\"pendingVoteToken(uint256,address)\":{\"notice\":\"Function to see pending tokens\"},\"poolLength()\":{\"notice\":\"Gets the length for the pool info array\"},\"set(uint256,uint256)\":{\"notice\":\"Update alloc points for the given pool\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables\"},\"updateVoteTokenPerBlock(uint256)\":{\"notice\":\"Update token per block\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw tokens from the contract\"}},\"notice\":\"Bet GQ token and earn ORVP token for using governance system\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingVote.sol\":\"StakingVote\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/StakingVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IORVote.sol\\\";\\n\\n/// @title Staking contract to earn Voting Power\\n/// @notice Bet GQ token and earn ORVP token for using governance system\\n/// @author Ibai -Nexxyo Labs\\ncontract StakingVote is Ownable, ReentrancyGuard {\\n    //============== LIBRARIES ==============\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IORVote;\\n\\n    //============== STRUCTS ==============\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 depositTimestamp;\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 stakeToken;\\n        uint256 allocPoint;\\n        uint256 lastRewardBlock;\\n        uint256 accVoteTokenPerShare;\\n        uint256 timeLock;\\n        uint256 multiplier;\\n        uint256 totalStaked;\\n    }\\n\\n    //============== VARIABLES ==============\\n    // Token variable declaration\\n    IORVote public voteToken;\\n    IERC20 public stakeToken;\\n    // Array of pools info\\n    PoolInfo[] public poolInfo;\\n    // User info by stake\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Vote token per block\\n    uint256 public voteTokenPerBlock;\\n    // Number that determines the total allocation points\\n    uint256 public totalAllocPoint;\\n    // Block to set the reward start block\\n    uint256 public startBlock;\\n\\n    //============== EVENTS ==============\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Claim(address indexed user, uint256 indexed pid);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    //============== CONSTRUCTOR ==============\\n    constructor(\\n        IORVote _voteToken,\\n        IERC20 _stakeToken,\\n        uint256 _voteTokenPerBlock,\\n        uint256 _startBlock\\n    ) {\\n        voteToken = _voteToken;\\n        stakeToken = _stakeToken;\\n        voteTokenPerBlock = _voteTokenPerBlock;\\n        startBlock = _startBlock;\\n    }\\n\\n    //============== EXTERNAL FUNCTIONS ==============\\n\\n    /// @notice Add a new pool with different configuration\\n    /// @param allocPoint allocation points assigned to this new pool\\n    /// @param token the stake token added to the pool\\n    /// @param timeLock the time for locking tokens\\n    function add(\\n        uint256 allocPoint,\\n        IERC20 token,\\n        uint256 timeLock,\\n        uint256 multiplier\\n    ) external onlyOwner {\\n        require(token == stakeToken, \\\"add: token != stakeToken\\\");\\n        massUpdatePools();\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint + allocPoint;\\n        poolInfo.push(\\n            PoolInfo({\\n                stakeToken: token,\\n                allocPoint: allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accVoteTokenPerShare: 0,\\n                timeLock: timeLock,\\n                multiplier: multiplier,\\n                totalStaked: 0\\n            })\\n        );\\n    }\\n\\n    /// @notice Update alloc points for the given pool\\n    /// @param pid The pool identifier\\n    /// @param allocPoint The new alloc point quantity\\n    function set(uint256 pid, uint256 allocPoint) external onlyOwner {\\n        massUpdatePools();\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[pid].allocPoint).add(\\n            allocPoint\\n        );\\n        poolInfo[pid].allocPoint = allocPoint;\\n    }\\n\\n    /// @notice Update token per block\\n    /// @param _newVoteTokenPerBlock The new token per block amount\\n    function updateVoteTokenPerBlock(uint256 _newVoteTokenPerBlock)\\n        external\\n        onlyOwner\\n    {\\n        voteTokenPerBlock = _newVoteTokenPerBlock;\\n    }\\n\\n    /// @notice Return reward multiplier over the given _from to _to block\\n    /// @param from From block\\n    /// @param to To block\\n    /// @param poolMultiplier The pool multiplier parameter\\n    /// @return Multiplier value\\n    function getMultiplier(\\n        uint256 from,\\n        uint256 to,\\n        uint256 poolMultiplier\\n    ) public pure returns (uint256) {\\n        return to.sub(from).mul(poolMultiplier);\\n    }\\n\\n    /// @notice Deposit tokens to the contract to receive rewards\\n    /// @param pid The pool identifier where user deposit tokens\\n    /// @param amount The amount to deposit\\n    function deposit(uint256 pid, uint256 amount) external nonReentrant {\\n        require(pid < poolInfo.length, \\\"deposit: pool exists?\\\");\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        updatePool(pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(pool.accVoteTokenPerShare)\\n                .div(1e12)\\n                .sub(user.rewardDebt);\\n            if (pending > 0) {\\n                safeVoteTokenTransfer(msg.sender, pending);\\n            }\\n        }\\n        if (amount > 0) {\\n            pool.stakeToken.safeTransferFrom(\\n                address(msg.sender),\\n                address(this),\\n                amount\\n            );\\n            user.amount = user.amount.add(amount);\\n            user.depositTimestamp = block.timestamp;\\n            pool.totalStaked = pool.totalStaked.add(amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accVoteTokenPerShare).div(1e12);\\n        emit Deposit(msg.sender, pid, amount);\\n    }\\n\\n    /// @notice Deposit tokens to the contract to receive rewards\\n    /// @param pid The pool identifier where user deposit tokens\\n    function claim(uint256 pid) external nonReentrant {\\n        require(pid < poolInfo.length, \\\"deposit: pool exists?\\\");\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        updatePool(pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(pool.accVoteTokenPerShare)\\n                .div(1e12)\\n                .sub(user.rewardDebt);\\n            if (pending > 0) {\\n                safeVoteTokenTransfer(msg.sender, pending);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accVoteTokenPerShare).div(1e12);\\n        emit Claim(msg.sender, pid);\\n    }\\n\\n    /// @notice Withdraw tokens from the contract\\n    /// @param pid The pool identifier where user withdraw tokens\\n    /// @param amount The amount to withdraw\\n    function withdraw(uint256 pid, uint256 amount) external nonReentrant {\\n        require(pid < poolInfo.length, \\\"withdraw: pool exists?\\\");\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        require(\\n            block.timestamp > (user.depositTimestamp + pool.timeLock),\\n            \\\"withdraw: locked\\\"\\n        );\\n        require(user.amount >= amount, \\\"withdraw: not good amount\\\");\\n\\n        updatePool(pid);\\n        uint256 pending = user\\n            .amount\\n            .mul(pool.accVoteTokenPerShare)\\n            .div(1e12)\\n            .sub(user.rewardDebt);\\n        if (pending > 0) {\\n            safeVoteTokenTransfer(msg.sender, pending);\\n        }\\n        if (amount > 0) {\\n            pool.stakeToken.safeTransfer(address(msg.sender), amount);\\n            user.amount = user.amount.sub(amount);\\n            pool.totalStaked = pool.totalStaked.sub(amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accVoteTokenPerShare).div(1e12);\\n        emit Withdraw(msg.sender, pid, amount);\\n    }\\n\\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n    /// @param pid The pool identifier where user withdraws\\n    function emergencyWithdraw(uint256 pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        require(\\n            block.timestamp > (user.depositTimestamp + pool.timeLock),\\n            \\\"withdraw: locked\\\"\\n        );\\n        pool.stakeToken.safeTransfer(address(msg.sender), user.amount);\\n        pool.totalStaked = pool.totalStaked.sub(user.amount);\\n        emit EmergencyWithdraw(msg.sender, pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n    }\\n\\n    /// @notice Function to see pending tokens\\n    /// @param pid Identifier of the pool in which we consult the pending rewards\\n    /// @param user User that consult the rewards\\n    function pendingVoteToken(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage _user = userInfo[pid][user];\\n        uint256 accVoteTokenPerShare = pool.accVoteTokenPerShare;\\n        uint256 supply = pool.totalStaked;\\n        if (block.number > pool.lastRewardBlock && supply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number,\\n                pool.multiplier\\n            );\\n            uint256 resourceReward = multiplier\\n                .mul(voteTokenPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accVoteTokenPerShare = accVoteTokenPerShare.add(\\n                resourceReward.mul(1e12).div(supply)\\n            );\\n        }\\n        return\\n            _user.amount.mul(accVoteTokenPerShare).div(1e12).sub(\\n                _user.rewardDebt\\n            );\\n    }\\n\\n    /// @notice Gets the length for the pool info array\\n    /// @return poolInfo length\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    //============== PUBLIC FUNCTIONS ==============\\n\\n    /// @notice Update reward variables\\n    /// @param pid The pool identifier to update\\n    function updatePool(uint256 pid) public {\\n        PoolInfo storage pool = poolInfo[pid];\\n        if (block.number <= pool.lastRewardBlock) return;\\n        uint256 supply = pool.totalStaked;\\n        if (supply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(\\n            pool.lastRewardBlock,\\n            block.number,\\n            pool.multiplier\\n        );\\n        uint256 voteTokenReward = multiplier\\n            .mul(voteTokenPerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n\\n        voteToken.mint(address(this), voteTokenReward);\\n        pool.accVoteTokenPerShare = pool.accVoteTokenPerShare.add(\\n            voteTokenReward.mul(1e12).div(supply)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    /// @notice Update reward variables for all pools\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    //============== INTERNAL FUNCTIONS ==============\\n\\n    /// @notice Safe token transfer function, just in case if rounding error causes pool to not have enough Vote tokens\\n    /// @param to address for token receiver\\n    /// @param amount Tokens that receiver will receive\\n    function safeVoteTokenTransfer(address to, uint256 amount) internal {\\n        uint256 voteTokenBal = voteToken.balanceOf(address(this));\\n        if (amount > voteTokenBal) {\\n            voteToken.safeTransfer(to, voteTokenBal);\\n        } else {\\n            voteToken.safeTransfer(to, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc9e29b3b510238d675aa0adb3500b57cea63b63e1d4b92e65a87d4e9ef8dce00\",\"license\":\"MIT\"},\"contracts/interfaces/IORVote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IORVote is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8a8209ba936c3e6cb2fdd605d05c1253a7d0f7b0d7f4dc26b13d0a4d13b7f045\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001875380380620018758339810160408190526200003491620000eb565b6200003f3362000082565b60018055600280546001600160a01b039586166001600160a01b031991821617909155600380549490951693169290921790925560069190915560085562000138565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000e857600080fd5b50565b600080600080608085870312156200010257600080fd5b84516200010f81620000d2565b60208601519094506200012281620000d2565b6040860151606090960151949790965092505050565b61172d80620001486000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063630b5ba1116100b857806391b706931161007c57806391b70693146102a857806393f1a40b146102bb578063a666947414610310578063c7dcecec14610319578063e2bbb1581461032c578063f2fde38b1461033f57600080fd5b8063630b5ba114610261578063715018a6146102695780637bafb029146102715780638a0c89d2146102845780638da5cb5b1461029757600080fd5b8063379607f51161010a578063379607f5146101f9578063441a3e701461020c57806348cd4cb11461021f57806351eb05a61461022857806351ed6a301461023b5780635312ea8e1461024e57600080fd5b8063081e3eda146101475780631526fe271461015e578063160d66ae146101b057806317caf6f1146101db5780631ab06ee5146101e4575b600080fd5b6004545b6040519081526020015b60405180910390f35b61017161016c36600461141a565b610352565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610155565b6002546101c3906001600160a01b031681565b6040516001600160a01b039091168152602001610155565b61014b60075481565b6101f76101f2366004611433565b6103ab565b005b6101f761020736600461141a565b61045c565b6101f761021a366004611433565b6105bd565b61014b60085481565b6101f761023636600461141a565b6107fc565b6003546101c3906001600160a01b031681565b6101f761025c36600461141a565b61092f565b6101f7610a66565b6101f7610a91565b61014b61027f366004611455565b610ac7565b6101f7610292366004611496565b610ae1565b6000546001600160a01b03166101c3565b61014b6102b63660046114d3565b610d0e565b6102f56102c93660046114d3565b600560209081526000928352604080842090915290825290208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610155565b61014b60065481565b6101f761032736600461141a565b610e0d565b6101f761033a366004611433565b610e3c565b6101f761034d366004611503565b610fe2565b6004818154811061036257600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169650929491939092919087565b6000546001600160a01b031633146103de5760405162461bcd60e51b81526004016103d590611520565b60405180910390fd5b6103e6610a66565b610429816104236004858154811061040057610400611555565b90600052602060002090600702016001015460075461107d90919063ffffffff16565b90611089565b600781905550806004838154811061044357610443611555565b9060005260206000209060070201600101819055505050565b60026001540361047e5760405162461bcd60e51b81526004016103d59061156b565b600260015560045481106104cc5760405162461bcd60e51b81526020600482015260156024820152746465706f7369743a20706f6f6c206578697374733f60581b60448201526064016103d5565b6000600482815481106104e1576104e1611555565b60009182526020808320858452600582526040808520338652909252922060079091029091019150610512836107fc565b805415610567576000610553826001015461054d64e8d4a510006105478760030154876000015461109590919063ffffffff16565b906110a1565b9061107d565b905080156105655761056533826110ad565b505b600382015481546105829164e8d4a510009161054791611095565b6001820155604051839033907f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d490600090a350506001805550565b6002600154036105df5760405162461bcd60e51b81526004016103d59061156b565b6002600155600454821061062e5760405162461bcd60e51b815260206004820152601660248201527577697468647261773a20706f6f6c206578697374733f60501b60448201526064016103d5565b60006004838154811061064357610643611555565b60009182526020808320868452600582526040808520338652909252922060046007909202909201908101546002830154919350610680916115b8565b42116106c15760405162461bcd60e51b815260206004820152601060248201526f1dda5d1a191c985dce881b1bd8dad95960821b60448201526064016103d5565b80548311156107125760405162461bcd60e51b815260206004820152601960248201527f77697468647261773a206e6f7420676f6f6420616d6f756e740000000000000060448201526064016103d5565b61071b846107fc565b6000610749826001015461054d64e8d4a510006105478760030154876000015461109590919063ffffffff16565b9050801561075b5761075b33826110ad565b831561079a578254610777906001600160a01b03163386611153565b8154610783908561107d565b82556006830154610794908561107d565b60068401555b600383015482546107b59164e8d4a510009161054791611095565b6001830155604051848152859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689060200160405180910390a3505060018055505050565b60006004828154811061081157610811611555565b9060005260206000209060070201905080600201544311610830575050565b6006810154600081900361084957504360029091015550565b600061085e8360020154438560050154610ac7565b9050600061088b60075461054786600101546108856006548761109590919063ffffffff16565b90611095565b6002546040516340c10f1960e01b8152306004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156108d857600080fd5b505af11580156108ec573d6000803e3d6000fd5b5050505061091a61090f8461054764e8d4a510008561109590919063ffffffff16565b600386015490611089565b60038501555050436002909201919091555050565b6002600154036109515760405162461bcd60e51b81526004016103d59061156b565b600260018190555060006004828154811061096e5761096e611555565b600091825260208083208584526005825260408085203386529092529220600460079092029092019081015460028301549193506109ab916115b8565b42116109ec5760405162461bcd60e51b815260206004820152601060248201526f1dda5d1a191c985dce881b1bd8dad95960821b60448201526064016103d5565b80548254610a07916001600160a01b03909116903390611153565b80546006830154610a179161107d565b60068301558054604051908152839033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a3600080825560019182015580555050565b60045460005b81811015610a8d57610a7d816107fc565b610a86816115d0565b9050610a6c565b5050565b6000546001600160a01b03163314610abb5760405162461bcd60e51b81526004016103d590611520565b610ac560006111b6565b565b6000610ad782610885858761107d565b90505b9392505050565b6000546001600160a01b03163314610b0b5760405162461bcd60e51b81526004016103d590611520565b6003546001600160a01b03848116911614610b685760405162461bcd60e51b815260206004820152601860248201527f6164643a20746f6b656e20213d207374616b65546f6b656e000000000000000060448201526064016103d5565b610b70610a66565b60006008544311610b8357600854610b85565b435b905084600754610b9591906115b8565b60079081556040805160e0810182526001600160a01b039687168152602081019788529081019283526000606082018181526080830196875260a0830195865260c0830182815260048054600181018255935292517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9290940291820180546001600160a01b031916949098169390931790965595517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c86015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d850155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e84015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a082015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a190910155565b60008060048481548110610d2457610d24611555565b600091825260208083208784526005825260408085206001600160a01b03891686529092529220600360079092029092019081015460068201546002830154929450909143118015610d7557508015155b15610dda576000610d8f8560020154438760050154610ac7565b90506000610db660075461054788600101546108856006548761109590919063ffffffff16565b9050610dd5610dce846105478464e8d4a51000611095565b8590611089565b935050505b610e02836001015461054d64e8d4a5100061054786886000015461109590919063ffffffff16565b979650505050505050565b6000546001600160a01b03163314610e375760405162461bcd60e51b81526004016103d590611520565b600655565b600260015403610e5e5760405162461bcd60e51b81526004016103d59061156b565b60026001556004548210610eac5760405162461bcd60e51b81526020600482015260156024820152746465706f7369743a20706f6f6c206578697374733f60581b60448201526064016103d5565b600060048381548110610ec157610ec1611555565b60009182526020808320868452600582526040808520338652909252922060079091029091019150610ef2846107fc565b805415610f3b576000610f27826001015461054d64e8d4a510006105478760030154876000015461109590919063ffffffff16565b90508015610f3957610f3933826110ad565b505b8215610f81578154610f58906001600160a01b0316333086611206565b8054610f649084611089565b81554260028201556006820154610f7b9084611089565b60068301555b60038201548154610f9c9164e8d4a510009161054791611095565b6001820155604051838152849033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159060200160405180910390a35050600180555050565b6000546001600160a01b0316331461100c5760405162461bcd60e51b81526004016103d590611520565b6001600160a01b0381166110715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d5565b61107a816111b6565b50565b6000610ada82846115e9565b6000610ada82846115b8565b6000610ada8284611600565b6000610ada828461161f565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156110f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111a9190611641565b9050808211156111405760025461113b906001600160a01b03168483611153565b505050565b60025461113b906001600160a01b031684845b6040516001600160a01b03831660248201526044810182905261113b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611244565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261123e9085906323b872dd60e01b9060840161117f565b50505050565b6000611299826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113169092919063ffffffff16565b80519091501561113b57808060200190518101906112b7919061165a565b61113b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d5565b6060610ad78484600085856001600160a01b0385163b6113785760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d5565b600080866001600160a01b0316858760405161139491906116a8565b60006040518083038185875af1925050503d80600081146113d1576040519150601f19603f3d011682016040523d82523d6000602084013e6113d6565b606091505b5091509150610e02828286606083156113f0575081610ada565b8251156114005782518084602001fd5b8160405162461bcd60e51b81526004016103d591906116c4565b60006020828403121561142c57600080fd5b5035919050565b6000806040838503121561144657600080fd5b50508035926020909101359150565b60008060006060848603121561146a57600080fd5b505081359360208301359350604090920135919050565b6001600160a01b038116811461107a57600080fd5b600080600080608085870312156114ac57600080fd5b8435935060208501356114be81611481565b93969395505050506040820135916060013590565b600080604083850312156114e657600080fd5b8235915060208301356114f881611481565b809150509250929050565b60006020828403121561151557600080fd5b8135610ada81611481565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156115cb576115cb6115a2565b500190565b6000600182016115e2576115e26115a2565b5060010190565b6000828210156115fb576115fb6115a2565b500390565b600081600019048311821515161561161a5761161a6115a2565b500290565b60008261163c57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561165357600080fd5b5051919050565b60006020828403121561166c57600080fd5b81518015158114610ada57600080fd5b60005b8381101561169757818101518382015260200161167f565b8381111561123e5750506000910152565b600082516116ba81846020870161167c565b9190910192915050565b60208152600082518060208401526116e381604085016020870161167c565b601f01601f1916919091016040019291505056fea26469706673582212203f4272fc73393d616e80dad43bb40fd9369f8e27c0c11ac96a683fb221497c8664736f6c634300080e0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Ibai -Nexxyo Labs",
    "kind": "dev",
    "methods": {
      "add(uint256,address,uint256,uint256)": {
        "params": {
          "allocPoint": "allocation points assigned to this new pool",
          "timeLock": "the time for locking tokens",
          "token": "the stake token added to the pool"
        }
      },
      "claim(uint256)": {
        "params": {
          "pid": "The pool identifier where user deposit tokens"
        }
      },
      "deposit(uint256,uint256)": {
        "params": {
          "amount": "The amount to deposit",
          "pid": "The pool identifier where user deposit tokens"
        }
      },
      "emergencyWithdraw(uint256)": {
        "params": {
          "pid": "The pool identifier where user withdraws"
        }
      },
      "getMultiplier(uint256,uint256,uint256)": {
        "params": {
          "from": "From block",
          "poolMultiplier": "The pool multiplier parameter",
          "to": "To block"
        },
        "returns": {
          "_0": "Multiplier value"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingVoteToken(uint256,address)": {
        "params": {
          "pid": "Identifier of the pool in which we consult the pending rewards",
          "user": "User that consult the rewards"
        }
      },
      "poolLength()": {
        "returns": {
          "_0": "poolInfo length"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "set(uint256,uint256)": {
        "params": {
          "allocPoint": "The new alloc point quantity",
          "pid": "The pool identifier"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool(uint256)": {
        "params": {
          "pid": "The pool identifier to update"
        }
      },
      "updateVoteTokenPerBlock(uint256)": {
        "params": {
          "_newVoteTokenPerBlock": "The new token per block amount"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "amount": "The amount to withdraw",
          "pid": "The pool identifier where user withdraw tokens"
        }
      }
    },
    "title": "Staking contract to earn Voting Power",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(uint256,address,uint256,uint256)": {
        "notice": "Add a new pool with different configuration"
      },
      "claim(uint256)": {
        "notice": "Deposit tokens to the contract to receive rewards"
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit tokens to the contract to receive rewards"
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY."
      },
      "getMultiplier(uint256,uint256,uint256)": {
        "notice": "Return reward multiplier over the given _from to _to block"
      },
      "massUpdatePools()": {
        "notice": "Update reward variables for all pools"
      },
      "pendingVoteToken(uint256,address)": {
        "notice": "Function to see pending tokens"
      },
      "poolLength()": {
        "notice": "Gets the length for the pool info array"
      },
      "set(uint256,uint256)": {
        "notice": "Update alloc points for the given pool"
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables"
      },
      "updateVoteTokenPerBlock(uint256)": {
        "notice": "Update token per block"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw tokens from the contract"
      }
    },
    "notice": "Bet GQ token and earn ORVP token for using governance system",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1610,
        "contract": "contracts/StakingVote.sol:StakingVote",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1810,
        "contract": "contracts/StakingVote.sol:StakingVote",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3928,
        "contract": "contracts/StakingVote.sol:StakingVote",
        "label": "voteToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IORVote)5251"
      },
      {
        "astId": 3931,
        "contract": "contracts/StakingVote.sol:StakingVote",
        "label": "stakeToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)2503"
      },
      {
        "astId": 3935,
        "contract": "contracts/StakingVote.sol:StakingVote",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(PoolInfo)3925_storage)dyn_storage"
      },
      {
        "astId": 3942,
        "contract": "contracts/StakingVote.sol:StakingVote",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3909_storage))"
      },
      {
        "astId": 3944,
        "contract": "contracts/StakingVote.sol:StakingVote",
        "label": "voteTokenPerBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3946,
        "contract": "contracts/StakingVote.sol:StakingVote",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3948,
        "contract": "contracts/StakingVote.sol:StakingVote",
        "label": "startBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)3925_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)3925_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingVote.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2503": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IORVote)5251": {
        "encoding": "inplace",
        "label": "contract IORVote",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)3909_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingVote.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3909_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3909_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct StakingVote.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)3909_storage)"
      },
      "t_struct(PoolInfo)3925_storage": {
        "encoding": "inplace",
        "label": "struct StakingVote.PoolInfo",
        "members": [
          {
            "astId": 3912,
            "contract": "contracts/StakingVote.sol:StakingVote",
            "label": "stakeToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)2503"
          },
          {
            "astId": 3914,
            "contract": "contracts/StakingVote.sol:StakingVote",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3916,
            "contract": "contracts/StakingVote.sol:StakingVote",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3918,
            "contract": "contracts/StakingVote.sol:StakingVote",
            "label": "accVoteTokenPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3920,
            "contract": "contracts/StakingVote.sol:StakingVote",
            "label": "timeLock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3922,
            "contract": "contracts/StakingVote.sol:StakingVote",
            "label": "multiplier",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3924,
            "contract": "contracts/StakingVote.sol:StakingVote",
            "label": "totalStaked",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(UserInfo)3909_storage": {
        "encoding": "inplace",
        "label": "struct StakingVote.UserInfo",
        "members": [
          {
            "astId": 3904,
            "contract": "contracts/StakingVote.sol:StakingVote",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3906,
            "contract": "contracts/StakingVote.sol:StakingVote",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3908,
            "contract": "contracts/StakingVote.sol:StakingVote",
            "label": "depositTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}